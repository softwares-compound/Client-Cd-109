input {
  file {
    path => "/host/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "plain"
  }
}

filter {
  grok {
    match => { "message" => "%{LOGLEVEL:log_level}" }
  }

  if "ERROR" in [log_level] or "WARN" in [log_level] {
    mutate {
      add_tag => ["critical_log"]
    }

    # Filter out sensitive information
    mutate {
      gsub => [
        # Email addresses
        "message", "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}", "[FILTERED_EMAIL]",

        # SSNs (e.g., 123-45-6789)
        "message", "\\b\\d{3}-\\d{2}-\\d{4}\\b", "[FILTERED_SSN]",

        # IPv4 addresses
        "message", "\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b", "[FILTERED_IP]",

        # Credit Card Numbers (Visa, MasterCard, etc.)
        "message", "\\b(?:\\d[ -]*?){13,19}\\b", "[FILTERED_CREDIT_CARD]",

        # Phone Numbers (various formats)
        "message", "\\b\\+?\\d{1,4}?[\\s.-]?\\(?(?:\\d{1,5})\\)?[\\s.-]?\\d{1,5}[\\s.-]?\\d{1,9}\\b", "[FILTERED_PHONE]",

        # Dates of Birth (MM/DD/YYYY, DD/MM/YYYY)
        "message", "\\b(?:\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4})\\b", "[FILTERED_DOB]",

        # Passport Numbers (simple pattern)
        "message", "\\b[A-PR-WYZa-pr-wyz][1-9]\\d{5,8}\\b", "[FILTERED_PASSPORT]",

        # Driver's License Numbers (various formats)
        "message", "\\b[A-Za-z0-9]{1,20}\\b", "[FILTERED_DRIVER_LICENSE]",

        # Bank Account Numbers (IBAN, simple patterns)
        "message", "\\b[A-Z]{2}\\d{2}[A-Z0-9]{1,30}\\b", "[FILTERED_BANK_ACCOUNT]",

        # API Keys (alphanumeric strings of specific lengths)
        "message", "\\b[a-zA-Z0-9_-]{32,}\\b", "[FILTERED_API_KEY]",

        # Authentication Tokens (JWT, etc.)
        "message", "\\beyJ[^\s]+\b", "[FILTERED_TOKEN]",

        # Passwords (if they appear in logs, which they shouldn't)
        "message", "(?i)password[=:][^\s]+", "password=[FILTERED_PASSWORD]",

        # Physical Addresses (simple pattern)
        "message", "\\d{1,5}\\s[A-Za-z0-9\\s]+(?:Street|St\\.|Avenue|Ave\\.|Boulevard|Blvd\\.|Road|Rd\\.)", "[FILTERED_ADDRESS]",

        # Names (First and Last Names)
        "message", "\\b([A-Z][a-z]+\\s[A-Z][a-z]+)\\b", "[FILTERED_NAME]"
      ]
    }
  } else {
    drop { }
  }
}

output {
  tcp {
    host => "${LOG_SERVER_IP}"
    port => 5000
    codec => json
  }

  stdout {
    codec => rubydebug
  }
}
